

ðŸ”¹TinyLlama Chat w/ MySQL (Only raw DB data printed)

Type 'exit' or 'quit' to stop.

C:\Users\AD54619\Text2Sql\better_tiny.py:79: LangChainDeprecationWarning: The class `QuerySQLDataBaseTool` was deprecated in LangChain 0.3.12 and will be removed in 1.0. An updated version of the class exists in the :class:`~langchain-community package and should be used instead. To use it run `pip install -U :class:`~langchain-community` and import as `from :class:`~langchain_community.tools import QuerySQLDatabaseTool``.
  query_tool = QuerySQLDataBaseTool(db=wide_db)
User Question: which employee has more than 50000 salary
[DEBUG] Using tables: ['departments', 'employees']
Traceback (most recent call last):
  File "C:\Users\AD54619\Text2Sql\better_tiny.py", line 129, in <module>
    main()
    ~~~~^^
  File "C:\Users\AD54619\Text2Sql\better_tiny.py", line 99, in main
    chain = create_sql_query_chain(
        llm=llm,
    ...<2 lines>...
        output_parser=StrOutputParser(),  # ensures raw string
    )
TypeError: create_sql_query_chain() got an unexpected keyword argument 'output_parser'





    
    sql_query = tokenizer.batch_decode(outputs, skip_special_tokens=True)[0]
    return sql_query

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Generate SQL from natural language')
    parser.add_argument('--question', type=str, help='The natural language question')
    parser.add_argument('--schema_file', type=str, help='File containing the database schema')
    
    args = parser.parse_args()
    
    if args.question and args.schema_file:
        with open(args.schema_file, 'r') as f:
            schema = f.read()
        
        sql = generate_sql(args.question, schema)
        print("\nGenerated SQL Query:")
        print(sql)
    else:
        # Use the example from your code if no arguments provided
        question = "What is the average, minimum, and maximum age for all French musicians?"
        schema = """
           "stadium" "Stadium_ID" int , "Location" text , "Name" text , "Capacity" int , "Highest" int , "Lowest" int , "Average" int , foreign_key:  primary key: "Stadium_ID" [SEP] "singer" "Singer_ID" int , "Name" text , "Country" text , "Song_Name" text , "Song_release_year" text , "Age" int , "Is_male" bool , foreign_key:  primary key: "Singer_ID" [SEP] "concert" "concert_ID" int , "concert_Name" text , "Theme" text , "Year" text , foreign_key: "Stadium_ID" text from "stadium" "Stadium_ID" , primary key: "concert_ID" [SEP] "singer_in_concert"  foreign_key: "concert_ID" int from "concert" "concert_ID" , "Singer_ID" text from "singer" "Singer_ID" , primary key: "concert_ID" "Singer_ID"
        """
        
        sql = generate_sql(question, schema)
        print("\nGenerated SQL Query:")
        print(sql)


PS C:\Users\AD54619\Text2Sql> python load.py --question "What is the average, minimum, and maximum age for all French musicians?" --schema_file schema.txt
Processing query...
C:\Users\AD54619\Text2Sql\virtualen\Lib\site-packages\transformers\generation\configuration_utils.py:676: UserWarning: `num_beams` is set to 1. However, `early_stopping` is set to `True` -- this flag is only used in beam-based generation modes. You should set `num_beams>1` or unset `early_stopping`.
  warnings.warn(

Generated SQL Query:
SELECT avg(age), min(age), max(age) FROM singer WHERE country = 'France'
